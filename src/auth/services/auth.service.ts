import {
  Injectable,
  ConflictException,
  UnauthorizedException,
} from '@nestjs/common';
import { UsersService } from '../../users/services/users.service';
import { JwtService } from '@nestjs/jwt';
import { RegisterDto } from '../dto/register.dto';
import { RefreshTokenDto } from '../dto/refresh-token.dto';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { RefreshToken } from '../entities/refresh-token.entity';
import { User } from '../../users/entities/user.entity';
import * as bcrypt from 'bcrypt';

@Injectable()
export class AuthService {
  constructor(
    private readonly usersService: UsersService,
    private readonly jwtService: JwtService,

    @InjectRepository(RefreshToken)
    private readonly refreshTokenRepository: Repository<RefreshToken>,
  ) {}

  /**
   * Registra um novo usu√°rio.
   */
  async register(registerDto: RegisterDto) {
    console.log(`üîç Tentando registrar o usu√°rio: ${registerDto.email}`);

    const existingUser = await this.usersService.findByEmail(registerDto.email);
    if (existingUser) {
      console.log('‚ùå E-mail j√° cadastrado.');
      throw new ConflictException('E-mail j√° cadastrado.');
    }

    const newUser = await this.usersService.create(registerDto);
    console.log(`‚úÖ Usu√°rio ${newUser.email} registrado com sucesso.`);
    return newUser;
  }

  /**
   * Valida o usu√°rio durante o login.
   */
  async validateUser(email: string, password: string) {
    console.log(`üîç Buscando usu√°rio com email: ${email}`);
    
    const user = await this.usersService.findByEmail(email, true); // Carrega a senha para valida√ß√£o

    if (!user) {
      console.log('‚ùå Usu√°rio n√£o encontrado.');
      throw new UnauthorizedException('Credenciais inv√°lidas.');
    }

    console.log(`‚úÖ Usu√°rio encontrado: ${user.email}`);
    console.log(`üîë Senha armazenada no banco: ${user.password}`);

    if (!user.password) {
      console.log('‚ùå Senha n√£o encontrada no banco.');
      throw new UnauthorizedException('Credenciais inv√°lidas.');
    }

    console.log(`üîÑ Comparando senha digitada: ${password}`);
    
    const isMatch = await bcrypt.compare(password, user.password);

    if (!isMatch) {
      console.log('‚ùå Senha inv√°lida.');
      throw new UnauthorizedException('Credenciais inv√°lidas.');
    }

    console.log('‚úÖ Senha v√°lida! Login autorizado.');

    return user;
  }

  /**
   * Gera o token JWT e Refresh Token ao logar.
   */
  async login(user: User) {
    console.log(`üîê Gerando tokens para o usu√°rio: ${user.email}`);

    const payload = { id: user.id, email: user.email, role: user.role?.name };
    const accessToken = this.jwtService.sign(payload);
    const refreshToken = await this.generateRefreshToken(user);

    console.log('‚úÖ Tokens gerados com sucesso.');

    return {
      accessToken,
      refreshToken,
      userId: user.id,
      role: user.role?.name,
    };
  }

  /**
   * Gera um novo Refresh Token e salva no banco.
   */
  async generateRefreshToken(user: User) {
    console.log(`üîÑ Criando Refresh Token para o usu√°rio ID: ${user.id}`);

    const token = this.jwtService.sign({ userId: user.id }, { expiresIn: '7d' });

    const expiresAt = new Date();
    expiresAt.setDate(expiresAt.getDate() + 7);

    const refreshToken = this.refreshTokenRepository.create({
      token,
      user: user, // Passa o objeto User corretamente
      expiresAt,
    });

    console.log(`üõ† Salvando Refresh Token no banco para user_id: ${user.id}`);

    await this.refreshTokenRepository.save(refreshToken);

    console.log('‚úÖRefresh Token salvo no banco.');
    return token;
  }

  /**
   * Valida e renova o Refresh Token.
   */
  async refreshToken(refreshTokenDto: RefreshTokenDto) {
    console.log(`üîÑ Tentando validar Refresh Token: ${refreshTokenDto.refreshToken}`);

    const storedToken = await this.refreshTokenRepository.findOne({
      where: { token: refreshTokenDto.refreshToken },
      relations: ['user'], // Certifica-se de carregar o usu√°rio relacionado
    });

    if (!storedToken || storedToken.expiresAt < new Date()) {
      console.log('‚ùå Token inv√°lido ou expirado.');
      throw new UnauthorizedException('Token inv√°lido ou expirado.');
    }

    console.log('‚úÖ Refresh Token v√°lido. Gerando novo Access Token.');
    return this.login(storedToken.user);
  }
}
